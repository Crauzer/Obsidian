@page "/explorer"
@using LeagueToolkit.Core.Wad;
@using Microsoft.WindowsAPICodePack.Dialogs;
@using Obsidian.Data.Wad;
@using Obsidian.Services;
@using Obsidian.Utils;
@using PhotinoNET;

<style>
    .tree-view-item-wrapper {
        width: 100%;
        padding-left: 2rem;
    }

        .tree-view-item-wrapper:hover {
            background-color: #0000000a;
        }

    .tree-view-item {
        width: 100%;
        table-layout: fixed;
    }

</style>

<MudPaper Style="position: relative;">
    <MudPaper Elevation="25">
        <MudToolBar Dense DisableGutters>
            <MudMenu Class="ml-4" Icon="@Icons.Material.TwoTone.Archive" Color="Color.Inherit" AnchorOrigin="Origin.BottomLeft">
                <MudMenuItem Icon="@Icons.Material.TwoTone.FileOpen" IconColor="Color.Primary" IconSize="Size.Small"
                             OnClick="OpenWad">
                    Open
                </MudMenuItem>
            </MudMenu>
        </MudToolBar>
    </MudPaper>

    <MudTabs @bind-ActivePanelIndex="_activeTabId">
        <ChildContent>
            @foreach (WadTabModel wadTab in this.Tabs)
            {
                <MudTabPanel Text="@wadTab.Name" Tag="@wadTab.Id">
                    <TreeView ItemsFlat="@wadTab.GetFlattenedItems()" Height="750px" ItemSize="30f">
                        <ItemTemplate>
                            <div class="tree-view-item-wrapper cursor-pointer" @ondblclick="(_ => OnWadItemDoubleClick(context))">
                                <table class="tree-view-item" style="@($"padding-left: {context.Depth * 20}px;")">
                                    <tr @key="context.Id" style="height: 30px;">
                                        <td style="vertical-align: middle; width: 2%">
                                            @if (context.Type is WadItemType.Folder)
                                            {
                                                <MudIconButton Icon="@(context.IsExpanded ? Icons.Material.TwoTone.KeyboardArrowDown : Icons.Material.TwoTone.KeyboardArrowRight)"
                                                       Color="Color.Inherit" Size="Size.Small" OnClick="@(_ => OnWadItemToggleExpand(context))" />
                                            }
                                        </td>
                                        <td style="width: 3%">
                                            <MudCheckBox @bind-Checked="context.IsChecked" Color="Color.Primary" Size="Size.Small" />
                                        </td>
                                        <td style="text-align: center; width: 2%">
                                            @if (context.Type is WadItemType.File)
                                            {
                                                <MudIcon Class="d-block" Icon="@Icons.Custom.FileFormats.FileDocument" Size="Size.Small" Color="Color.Inherit" />
                                            }
                                            else if (context.Type is WadItemType.Folder)
                                            {
                                                <MudIcon Class="d-block" Icon="@Icons.Material.TwoTone.Folder" Size="Size.Small" Color="Color.Inherit" />
                                            }
                                        </td>
                                        <td style="white-space: nowrap; width: 100%; vertical-align: middle;">
                                            <MudText Class="d-block">@context.Name</MudText>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </ItemTemplate>
                    </TreeView>
                </MudTabPanel>
            }
        </ChildContent>
        <TabPanelHeader>
            <MudTooltip Text="Close">
                <MudIconButton Class="ml-1" Color="Color.Error" Icon="@Icons.Material.TwoTone.Close"
                               OnClick="(_) => RemoveWadTab(context)" />
            </MudTooltip>
        </TabPanelHeader>
    </MudTabs>

    <MudOverlay DarkBackground Absolute Visible="_isBusy">
        <MudProgressCircular Indeterminate Color="Color.Primary" />
    </MudOverlay>
</MudPaper>

@code {
    [Inject] public HashtableService Hashtable { get; set; }
    [Inject] public PhotinoWindow Window { get; set; }
    [Inject] public ISnackbar Snackbar { get; set; }

    public List<WadTabModel> Tabs { get; set; } = new();

    private bool _isBusy;

    private int _activeTabId = 0;

    public async Task OpenWad()
    {
        CommonOpenFileDialog dialog = new("Open Wad archives") { Multiselect = true };
        dialog.Filters.Add(FileDialogUtils.CreateWadFilter());

        if (dialog.ShowDialog(this.Window.WindowHandle) is CommonFileDialogResult.Cancel)
            return;

        this._isBusy = true;
        try
        {
            await Task.Run(() => OpenWadFiles(dialog.FileNames));
            this.Snackbar.Add("Successfully opened Wad archives!", Severity.Success);
        }
        catch (Exception exception)
        {
            SnackbarUtils.ShowError(this.Snackbar, exception);
        }
        finally
        {
            this._isBusy = false;
        }
    }

    private void OpenWadFiles(IEnumerable<string> wadPaths)
    {
        foreach (string wadPath in wadPaths)
        {
            FileStream wadFileStream = File.OpenRead(wadPath);
            WadFile wad = new(wadFileStream);

            this.Tabs.Add(new(Path.GetFileName(wadPath), wad, this.Hashtable));
        }
    }

    private void RemoveWadTab(MudTabPanel tabPanel)
    {
        if (tabPanel.ID is not Guid tabId)
            return;

        WadTabModel tab = this.Tabs.FirstOrDefault(x => x.Id == tabId);
        if (tab is not null)
        {
            tab.Wad.Dispose();
            this.Tabs.Remove(tab);
        }
    }

    private void OnWadItemDoubleClick(WadItemModel item)
    {
        if (item is WadFolderModel folder)
            OnWadItemToggleExpand(folder);
    }

    private void OnWadItemToggleExpand(WadItemModel item)
    {
        item.IsExpanded = !item.IsExpanded;
        StateHasChanged();
    }
}
