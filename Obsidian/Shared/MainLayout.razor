@using Obsidian.Data;
@using Obsidian.Shared.Dialogs;
@using Obsidian.Utils;
@using Octokit;
@using System.Reflection;
@using Semver;
@using Serilog;
@using System.Diagnostics;
@inherits LayoutComponentBase

<style>
    .main-content-vertical {
        height: 100%;
        margin-left: 75px !important;
        padding-top: 0px !important;
    }

    .mud-drawer {
        background: rgb(113,43,54);
        background: linear-gradient(180deg, rgba(113,43,54,1) 0%, rgba(143,41,57,1) 100%);
    }

    .logo-image {
        width: 50px;
        border-radius: 25%;
        transition: box-shadow 250ms, width 100ms;
    }

        .logo-image:hover {
            width: 51px;
            box-shadow: 0px 0px 8px rgba(0,0,0,4);
        }
</style>

<MudThemeProvider IsDarkMode Theme="Theme" />
<MudDialogProvider />
<MudSnackbarProvider />
<HashtableProvider OnLoadingStart="OnHashtableLoadingStart" OnLoadingFinished="OnHashtableLoadingFinished" />

<MudLayout>
    <MudDrawer Open
               Style="width: 75px;"
               Elevation="4">
        <MudStack Class="py-2" Style="height: 100%"
                  AlignItems="AlignItems.Center">
            <MudImage Class="logo-image"
                      Elevation="6"
                      ObjectFit="ObjectFit.ScaleDown"
                      Src="images/obsidian_logonew_256.png" Alt="Obsidian logo" />
            @if (string.IsNullOrEmpty(this.UpdateUrl) is false)
            {
                <MudTooltip Text="Update available!" Color="Color.Dark" Placement="Placement.Right">
                    <MudIconButton Icon="@Icons.Material.TwoTone.Download" Color="Color.Info" Size="Size.Medium"
                               OnClick="GoToNewRelease" />
                </MudTooltip>
            }
            <MudSpacer />
            <MudStack AlignItems="AlignItems.Center">
                <MudTooltip Text="Settings" Color="Color.Dark" Placement="Placement.Right">
                    <MudIconButton Icon="@Icons.Material.TwoTone.Settings" Size="Size.Large"
                                   OnClick="OpenSettings" />
                </MudTooltip>
                <MudTooltip Text="Submit Bug Report" Color="Color.Dark" Placement="Placement.Right">
                    <MudIconButton Icon="@CustomIcons.Material.Alert" Color="Color.Inherit" Size="Size.Medium"
                                   OnClick="SubmitBugReport" />
                </MudTooltip>
                <MudTooltip Text="Go to GitHub" Color="Color.Dark" Placement="Placement.Right">
                    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Size="Size.Medium"
                                   OnClick="GoToGithub" />
                </MudTooltip>
                <MudText Typo="Typo.body2">
                    @DisplayVersion
                </MudText>
            </MudStack>
        </MudStack>
    </MudDrawer>
    <MudMainContent Class="main-content-vertical">
        @if (_isReady)
        {
            @Body
        }
    </MudMainContent>
    <MudOverlay DarkBackground Visible="_isLoadingHashtable" ZIndex="9999">
        <MudStack AlignItems="AlignItems.Center">
            <MudProgressCircular Indeterminate Color="Color.Primary" Size="Size.Large" />
            <MudText Typo="Typo.h5">Syncing hashtables from CDragon...</MudText>
        </MudStack>
    </MudOverlay>
</MudLayout>

@code {
    [Inject] public Config Config { get; set; }
    [Inject] public IDialogService DialogService { get; set; }
    [Inject] public IJSRuntime Js { get; set; }
    [Inject] public ISnackbar Snackbar { get; set; }

    public AppTheme Theme { get; } = new();

    public string UpdateUrl { get; set; }

    public string DisplayVersion => SemVersion.FromVersion(Version.Parse(FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).FileVersion)).ToString();

    private bool _isLoadingHashtable;
    private bool _isReady;

    private void OnHashtableLoadingStart()
    {
        this._isLoadingHashtable = true;
    }

    private async Task OnHashtableLoadingFinished()
    {
        this._isLoadingHashtable = false;

        if (string.IsNullOrEmpty(this.Config.GameDataDirectory) && !this.Config.DoNotRequireGameDirectory)
            await this.DialogService.Show<StartupDialog>().Result;

        this._isReady = true;
    }

    private void OpenSettings()
    {
        this.DialogService.Show<SettingsDialog>();
    }

    private async Task SubmitBugReport()
    {
        await this.Js.InvokeVoidAsync("useCmd", @"explorer ""https://github.com/Crauzer/Obsidian/issues/new?assignees=&labels=bug%2C+triage&template=bug_report.md&title=%5BBUG%5D+%2A%2ABug+report+title+here%2A%2A""");
    }

    private async Task GoToGithub()
    {
        await this.Js.InvokeVoidAsync("useCmd", @"explorer ""https://github.com/Crauzer/Obsidian""");
    }

    private async Task GoToNewRelease()
    {
        await this.Js.InvokeVoidAsync("useCmd", @$"explorer ""{this.UpdateUrl}""");
    }

    private async Task CheckForUpdate()
    {
        Log.Information("Checking for new update");
        try
        {
            GitHubClient gitClient = new GitHubClient(new ProductHeaderValue("Obsidian"));
            IReadOnlyList<Release> releases = await gitClient.Repository.Release.GetAll("Crauzer", "Obsidian");
            Release newestRelease = releases[0];

            FileVersionInfo versionInfo = FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location);
            SemVersion assemblySemver = SemVersion.FromVersion(Version.Parse(versionInfo.FileVersion));
            SemVersion latestReleaseSemver = SemVersion.Parse(newestRelease.TagName, SemVersionStyles.Strict);

            if (latestReleaseSemver.IsPrerelease is false
                && latestReleaseSemver.ComparePrecedenceTo(assemblySemver) > 0
            )
            {
                Log.Information($"Found new update: {latestReleaseSemver}");
                this.UpdateUrl = newestRelease.HtmlUrl;
            }
        }
        catch (Exception exception)
        {
            SnackbarUtils.ShowSoftError(this.Snackbar, exception);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await CheckForUpdate();

        await base.OnAfterRenderAsync(firstRender);
    }
}
