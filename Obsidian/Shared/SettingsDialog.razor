@using Microsoft.WindowsAPICodePack.Dialogs;
@using Obsidian.Data;
@using PhotinoNET;
<MudDialog DisableSidePadding>
    <TitleContent>
        <MudStack Row AlignItems="AlignItems.Center">
            <MudIcon Icon="@Icons.Material.TwoTone.Settings" Size="Size.Large" Color="Color.Primary" />
            <MudText Typo="Typo.h4">
                Settings
            </MudText>
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="width: 60vw; height: 75vh; overflow-y: scroll;">
            <MudGrid Spacing="2">
                <MudItem xs="12">
                    <DirectoryInput Directory="@Config.GameDataDirectory"
                                    OnClearDirectory="@(_ => Config.GameDataDirectory = null)"
                                    OnSelectDirectory="SelectGameDataDirectory">
                        <DescriptionContent>
                            <MudText>
                                This is the default directory that will be used for opening Wad archives
                            </MudText>
                        </DescriptionContent>
                    </DirectoryInput>
                </MudItem>
                <MudItem xs="12">
                    <DirectoryInput Directory="@Config.DefaultExtractDirectory"
                                    OnClearDirectory="@(_ => Config.DefaultExtractDirectory = null)"
                                    OnSelectDirectory="SelectDefaultExportDirectory">
                        <DescriptionContent>
                            <MudText>
                                This is the default directory that will be used for exporting files
                            </MudText>
                        </DescriptionContent>
                    </DirectoryInput>
                </MudItem>
                <MudItem xs="12">
                    <MudTooltip Arrow Text="Whether to update hashtables from CDragon on startup"
                                Color="Color.Dark">
                        <MudCheckBox Label="Sync Hashtables" @bind-Checked="Config.SyncHashtables"
                                     Color="Color.Primary" />
                    </MudTooltip>
                </MudItem>
                <MudItem xs="12">
                    <MudTooltip Arrow Text="Enables Discord Rich Presence"
                                Color="Color.Dark">
                        <MudCheckBox Label="Discord Rich Presence" @bind-Checked="Config.IsRichPresenceEnabled"
                                     Color="Color.Primary" />
                    </MudTooltip>
                </MudItem>
                <MudItem xs="12">
                    <MudTooltip Arrow Text="Whether to load animations for skinned meshes from skin packages"
                                Color="Color.Dark">
                        <MudCheckBox Label="Load Skinned Mesh Animations" @bind-Checked="Config.LoadSkinnedMeshAnimations"
                                     Color="Color.Primary" />
                    </MudTooltip>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>

@code {
    [Inject] public PhotinoWindow Window { get; set; }
    [Inject] public Config Config { get; set; }

    [CascadingParameter] MudDialogInstance Dialog { get; set; }

    private DialogOptions _options = new() { CloseButton = true, MaxWidth = MaxWidth.Large };

    public void SelectGameDataDirectory()
    {
        CommonOpenFileDialog dialog = new() { IsFolderPicker = true };

        if (dialog.ShowDialog(this.Window.WindowHandle) is CommonFileDialogResult.Ok)
            this.Config.GameDataDirectory = dialog.FileName;
    }
    public void SelectDefaultExportDirectory()
    {
        CommonOpenFileDialog dialog = new() { IsFolderPicker = true };

        if (dialog.ShowDialog(this.Window.WindowHandle) is CommonFileDialogResult.Ok)
            this.Config.DefaultExtractDirectory = dialog.FileName;
    }

    protected override void OnInitialized()
    {
        this.Dialog.SetOptions(this._options);
        base.OnInitialized();
    }
}
