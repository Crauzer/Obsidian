@using Microsoft.WindowsAPICodePack.Dialogs;
@using Obsidian.Data.Wad;
@using Obsidian.Data;
@using Obsidian.Pages;
@using Obsidian.Utils;

<style>
    .tree-view-item-wrapper {
        width: 100%;
        padding-left: 2rem;
    }

        .tree-view-item-wrapper:hover {
            background-color: #0000000a;
        }

    .tree-view-item {
        width: 100%;
        table-layout: fixed;
    }

    .tree-view-item-name {
        user-select: none;
        white-space: nowrap;
        width: 100%;
        vertical-align: middle;
    }
</style>


<div class="tree-view-item-wrapper cursor-pointer"
     @ondblclick="OnRowDoubleClick" @ondblclick:stopPropagation @ondblclick:preventDefault>
    <MudMenu Dense PositionAtCurser FullWidth="false" ActivationEvent="MouseEvent.RightClick" Size="Size.Small">
        <ChildContent>
            <MudMenuItem Icon="@Icons.Material.TwoTone.CopyAll" IconSize="Size.Small" IconColor="Color.Primary"
                         OnClick="@CopyPathToClipboard">
                <MudText Typo="Typo.subtitle2">Copy Path</MudText>
            </MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.TwoTone.CopyAll" IconSize="Size.Small" IconColor="Color.Primary"
                         OnClick="@CopyNameToClipboard">
                <MudText Typo="Typo.subtitle2">Copy Name</MudText>
            </MudMenuItem>
            <MudDivider />
            @if (this.Item.Type is WadItemType.File)
            {
                <MudMenuItem Icon="@CustomIcons.Material.ContentSave" IconSize="Size.Small" IconColor="Color.Primary"
                         OnClick="@Save">
                    <MudText Typo="Typo.subtitle2">Save</MudText>
                </MudMenuItem>
            }
            else
            {

            }
            <MudDivider />
            <MudMenuItem Icon="@Icons.Material.TwoTone.Code" IconSize="Size.Small" IconColor="Color.Primary">
                <MudTooltip Delay="150" Placement="Placement.Right" Color="Color.Dark">
                    <ChildContent>
                        <MudText Typo="Typo.subtitle2">Details</MudText>
                    </ChildContent>
                    <TooltipContent>
                        <MudStack Spacing="1" AlignItems="AlignItems.Start">
                            <MudText Typo="Typo.subtitle2">
                                @Item.Path
                            </MudText>
                            @if (Item is WadFileModel file)
                            {
                                <MudText Typo="Typo.subtitle2">
                                    XXHash: @string.Format("{0:x16}", file.Chunk.PathHash)
                                </MudText>
                                <MudText Typo="Typo.subtitle2">
                                    Compressed Size: @file.Chunk.CompressedSize
                                </MudText>
                                <MudText Typo="Typo.subtitle2">
                                    Uncompressed Size: @file.Chunk.UncompressedSize
                                </MudText>
                            }
                        </MudStack>
                    </TooltipContent>
                </MudTooltip>
            </MudMenuItem>
        </ChildContent>
        <ActivatorContent>
            <table class="tree-view-item" style="@($"padding-left: {Item.Depth * 20}px;")">
                <tr @key="Item.Id" style="height: 30px;">
                    <td style="vertical-align: middle; width: 20px">
                        @if (Item.Type is WadItemType.Folder)
                        {
                            <MudIconButton Icon="@(Item.IsExpanded ? Icons.Material.TwoTone.KeyboardArrowDown : Icons.Material.TwoTone.KeyboardArrowRight)"
                                       Color="Color.Inherit" Size="Size.Small"
                                       OnClick="@OnToggleExpand" @ondblclick:stopPropagation />
                        }
                    </td>
                    <td style="width: 44px">
                        <MudCheckBox StopClickPropagation @bind-Checked="IsSelected" Color="Color.Primary" Size="Size.Small" />
                    </td>
                    <td style="text-align: center; width: 24px">
                        @if (Item.Type is WadItemType.File)
                        {
                            <MudIcon Class="d-block" Icon="@Icons.Custom.FileFormats.FileDocument" Size="Size.Small" Color="Color.Inherit" />
                        }
                        else if (Item.Type is WadItemType.Folder)
                        {
                            <MudIcon Class="d-block" Icon="@Icons.Material.TwoTone.Folder" Size="Size.Small" Color="Color.Inherit" />
                        }
                    </td>
                    <td class="tree-view-item-name">
                        <MudHighlighter Class="mud-primary-text" Style="background-color: transparent; font-weight: bold;"
                                        Text="@Item.Name" HighlightedText="@WadTab.Filter" />
                    </td>
                </tr>
            </table>
        </ActivatorContent>
    </MudMenu>
</div>

@code {
    [CascadingParameter]
    public ExplorerPage Root { get; set; }

    [CascadingParameter]
    public WadTabModel WadTab { get; set; }

    [CascadingParameter]
    public IJSRuntime JsRuntime { get; set; }

    [Parameter]
    public WadItemModel Item { get; set; }

    public bool IsSelected
    {
        get => this.Item.IsSelected;
        set
        {
            if (this.Item.IsSelected == value)
                return;

            // Update children selection state
            this.Item.IsSelected = value;
            if (this.Item.Items is not null)
                foreach (WadItemModel item in this.Item.TraverseFlattenedItems())
                    item.IsSelected = value;

            this.Root.RefreshState();
        }
    }

    private void OnRowDoubleClick(MouseEventArgs e)
    {
        if (this.Item is WadFolderModel folder)
            OnToggleExpand();
    }

    private void OnToggleExpand()
    {
        this.Item.IsExpanded = !this.Item.IsExpanded;
        this.Root.RefreshState();
    }

    private async Task CopyNameToClipboard()
    {
        await this.JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", this.Item.Name);
    }

    private async Task CopyPathToClipboard()
    {
        await this.JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", this.Item.Path);
    }

    private void Save()
    {
        if (this.Item is not WadFileModel fileItem)
            return;

        CommonSaveFileDialog dialog = new("Save") { DefaultFileName = fileItem.Name };
        if (dialog.ShowDialog(this.Root.Window.WindowHandle) is not CommonFileDialogResult.Ok)
            return;

        this.Root.ToggleExporting(true);
        try
        {
            WadUtils.SaveChunk(this.WadTab.Wad, fileItem.Chunk, dialog.FileName);
            this.Root.Snackbar.Add($"Saved {fileItem.Name}", Severity.Success);
        }
        catch (Exception exception)
        {
            SnackbarUtils.ShowHardError(this.Root.Snackbar, exception);
        }
        finally
        {
            this.Root.ToggleExporting(false);
        }
    }
}
