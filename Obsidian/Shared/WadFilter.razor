@using MudBlazor.Utilities;
@using Obsidian.Data;

<MudStack Row
          Style="@_style"
          Spacing="1" AlignItems="AlignItems.Start">
    <MudTooltip Text="Regex" Color="Color.Dark">
        @if (UseRegexFilter)
        {
            <MudIconButton Class="mt-1 ml-1 mr-1"
                       Icon="@CustomIcons.Material.CodeJson" Size="Size.Small" Color="Color.Primary"
                       OnClick="ToggleRegex" />
        }
        else
        {
            <MudIconButton Class="mt-1 ml-1 mr-1"
                       Icon="@CustomIcons.Material.CodeJson" Size="Size.Small" Color="Color.Inherit"
                       OnClick="ToggleRegex" />
        }
    </MudTooltip>
    <div style="position: relative; width: 100%">
        <MudStack Class="absolute" Style="height: 100%; right: 8px"
                  Justify="Justify.Center">
            <MudStack Row Spacing="1">
                <MudChip Class="rounded ma-0" Size="Size.Small" Text="Ctrl" />
                <MudChip Class="rounded ma-0" Size="Size.Small" Text="F" />
            </MudStack>
        </MudStack>
        <MudTextField Margin="Margin.Dense"
                      T="string" @ref="InputField"
                      Class="mt-0 mud-elevation-2"
                      Variant="Variant.Filled"
                      DebounceInterval="500"
                      Label="Filter"
                      Value="Filter" ValueChanged="FilterChanged" />
    </div>
</MudStack>

@code {
    private string _style =>
              new StyleBuilder()
                  .AddStyle("width", this.FullWidth ? "100%" : "initial")
                  .Build();

    [Parameter]
    public bool FullWidth { get; set; }

    [Parameter]
    public bool UseRegexFilter { get; set; }

    [Parameter]
    public EventCallback<bool> UseRegexFilterChanged { get; set; }

    [Parameter]
    public string Filter { get; set; }

    [Parameter]
    public EventCallback<string> FilterChanged { get; set; }

    public MudTextField<string> InputField { get; set; }

    private async Task ToggleRegex()
    {
        await this.UseRegexFilterChanged.InvokeAsync(!this.UseRegexFilter);
    }
}
